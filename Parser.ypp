%skeleton "lalr1.cc"
%name-prefix "SSC"
%define "parser_class_name" "Parser"

%defines
%{
#include <string>
#include <cstdio>
#include "Lexer.hpp"
#include "Node.hpp"

/*
using namespace SSC;
class Lexer;
int SSClex(Node* node, Lexer* lexer);
*/

#define YYSTYPE Node
%}

%parse-param { Lexer* lexer }
%lex-param { Lexer* lexer }

%pure_parser
 
%token END 0 "end of file"
%token T_LNUMBER   "integer number (T_LNUMBER)"
%token T_VARIABLE "variable (T_VARIABLE)"
%token T_CONSTANT_ENCAPSED_STRING "quoted-string (T_CONSTANT_ENCAPSED_STRING)"
%token T_WHITESPACE      "whitespace (T_WHITESPACE)"

/* Rule */
%%

expr:
        variable '=' expr { 
            printf("$$.entity:%s, $$.value:%s\n"
                "$1.entity:%s, $1.value:%s\n"
                "$3.entity:%s, $3.value:%s\n", 
                $$.entity, $$.value, 
                $1.entity, $1.value, 
                $3.entity, $3.value); 
            /* do assign */ 
            printf("$$.entity:%s, $$.value:%s\n"
                "$1.entity:%s, $1.value:%s\n"
                "$3.entity:%s, $3.value:%s\n", 
                $$.entity, $$.value, 
                $1.entity, $1.value, 
                $3.entity, $3.value); 
        }
    |   scalar { $$ = $1; }
    |   variable { $$ = $1; }
;

variable:
        T_VARIABLE { $$ = $1; printf("variable:T_VARIABLE\n"); }
;

scalar:
        common_scalar { $$ = $1; }
;

common_scalar:
        T_LNUMBER { $$ = $1; }
    |   T_CONSTANT_ENCAPSED_STRING { $$ = $1; }
;

%%

void SSC::Parser::error(const SSC::Parser::location_type&, const std::string& m) {
    printf("parse error occurred.\n%s\n", m.c_str());
}
